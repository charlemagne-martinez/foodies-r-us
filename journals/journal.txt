2/14:
    - Created repo
    - Initial setup
2/15: 
    - Added html skeleton for each page
    - Added Select for table information
    - Added DDL.sql
    - Updated actions we are to take to update outline/ERD/schema based on TA/peer feedback
    - Update outline, ERD, schema, DDL.sql file based on TA and peer feedback
    - Update entities, crud list google doc so that we have checklist of things
    - Update HTML pages to be specialized to their own information tables
    - DMQ.sql
2/21:
    - checklist of what to do for step 3 based on peer feedback from reviews
2/22:
    - step 3 final submission based on peer feedback
2/27:
    - checklist of what to edit on project based on TA feedback from step 3 final submission, also for step 4
2/28:
    - decided on doing Users entity
    - got READ (Select) working
2/29:
    - got CREATE (Insert) working
    - DELETE (Delete) WORKSSSSSSSSSSSSSSS
    - UPDATE (Update) TEEHEE (dropdown corresponding to primary key ID works)
    - made column names more human readable (in Users page; currently hardcoded)


Todo : 
    

    (thoughts to consider later)
    - when we get to Locations, consider removing the UPDATE step as we don't see it making sense
    - see why adding script tag for updateUser.js in users.handlebars for the UPDATE does not work.... 
      also see if it's alright to keep that script in the users.handlebars like how we have it rn
    - regarding deleteUser.js, see if what we have to update dropdown option for update user when deleting a record works...
    - for Restaurants when adding and updating entry, consider having a dropdown for cuisine type that hooks
      up similarly to automatically insert similar to TA's method mentioned in ed post?
      AKA Could possibly handle RestaurantCuisines intersection table within form in Restaurants, 
      where we allow users to choose the cuisine type, instead of having another form specifically 
      in RestaurantCuisines where we allow the user to choose restaurant and cuisine type

    - input validation?



Update local feature branch with changes from remote main branch:
git fetch origin 
git checkout main
git pull origin main
git checkout [branch]
git merge main